{"version":3,"sources":["rendering/hero/hero-drawer.js","rendering/sliding-line/sliding-line.js","rendering/lines-gap.js","util/util.js","rendering/sliding-line/sliding-line-container.js","rendering/case/case-drawer.js","util/time-normaliztion.js","rendering/score-board/score-board.js","case/case-manager.js","hero/hero.js","score-storage/score-storage.js","game/game.js","case/case.js","case/case-factory.js","game/level-defaults.js","game/level-manager.js","rendering/game-container.js","rendering/hero/hero-container.js","rendering/start-modal.js","index.js"],"names":["HeroDrawer","container","position","getElement","heroContainer","el","document","createElement","classList","add","appendChild","remove","containerRect","getBoundingClientRect","top","getTopMargin","left","right","SlidingLine","size","slopeType","canvas","draw","ctx","width","height","startPos","endPos","x","y","moveTo","lineTo","stroke","createCanvasLine","getContext","boundingClientRect","bottom","percentageGap","getGapInPixels","gameContainerSize","delay","t","v","Promise","resolve","bind","mobileAndTabletcheck","check","a","navigator","userAgent","vendor","window","opera","test","substr","isMobileSafari","ua","iOS","match","webkit","SlidingLineContainer","containerID","gameContainer","getElementById","lines","drawLines","widthOfLine","getDimensions","heightOfLine","push","line","destroy","CaseDrawer","slidingPoints","catchCoordinates","timings","element","style","slide","end","addEventListener","event","propertyName","fall","setAttribute","start","body","normalizeTime","upperFallTime","lowerFallTime","time","pos","Error","ScoreBoard","levelEl","scoreEl","bestScoreEl","score","innerHTML","bestScore","level","CaseManager","cases","caseDrawers","Case","casePosition","getHorizontalPosition","getVerticalPosition","lineRect","getLineRect","fallTime","slideTime","getExpirationTime","specCase","pop","caseDrawer","getCaseDrawer","init","then","move","forEach","Hero","curPosition","ScoreStorage","localStorage","undefined","best","Game","levelManager","hero","CaseFactory","caseManager","scoreBoard","startModal","timers","isOver","levelParams","getLevelParams","speed","numOfCases","setTimeout","onCaseResolved","getPosition","endGame","addScore","length","genNextLevel","injectScore","clear","getBestScore","setBestScore","injectBestScore","create","levelUp","injectLevel","createCases","setLevel","changePosition","i","timer","delayCase","casesPerSec","expirationTime","newTime","getCasePosition","Math","round","random","baseSpeed","ret","normalizedTime","firstLevelNumOfCases","getNextLevelNumOfCases","num","getPrevLevelNumOfCases","LevelManager","startLevel","slowestSpeed","getSpeed","getCasesPerSecond","getNumOfCases","GameContainer","elementID","max","documentElement","clientHeight","innerHeight","leftHandler","rightHandler","buttons","controls","id","button","btnContainer","onclick","containerClass","btn","class","rect","HeroContainer","setWidth","getComputedStyle","parseFloat","marginTop","StartModal","startGameFn","startGame","overlay","modal","createOverlayEl","createModalEl","playButton","slidingLineContainer","heroDrawer","getLines","getCatchCoordinates","game","changeHeroPosition","onChange","injectTouchControls","e","keyCode","onresize","destroyLines"],"mappings":"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","file":"app.a90888e7.map","sourceRoot":"../app","sourcesContent":["\n\nexport class HeroDrawer {\n    /**\n     * @param {HeroContainer} container\n     * @param {string} position - 'left' or 'right'\n     */\n    constructor(container, position){\n        this.container = container.getElement()\n        this.heroContainer = container\n        this.position = position\n        this.el = document.createElement(\"div\")\n        this.el.classList.add('hero')\n        this.el.classList.add(position)\n        this.container.appendChild(this.el)\n    }\n    onChange(position){\n        if(position === this.position){\n            return false;\n        }\n        this.el.classList.remove(this.position)\n        this.el.classList.add(position)\n        this.position = position\n    }\n    getCatchCoordinates(){\n        let containerRect = this.container.getBoundingClientRect()\n\n        return {\n            top: containerRect.top + this.heroContainer.getTopMargin(),\n            left: containerRect.left,\n            right: containerRect.right\n        }\n    }\n}","\n\nexport class SlidingLine {\n    /**\n     * @param {Element} container - container in which line should be placed\n     * @param {{width: number, height: number}} size\n     * @param {\"left\" | \"right\"} slopeType\n     */\n    constructor(container, size, slopeType){\n        this.container = container;\n\n        this.slopeType = slopeType;\n        this.size = size;\n\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.classList.add(`line-${slopeType}`)\n        this.draw()\n    }\n    createCanvasLine(ctx, width, height){\n        let startPos = {}\n        let endPos = {}\n        if(this.slopeType === 'left'){\n            startPos.x = 0\n            startPos.y = 0\n            endPos.x = width\n            endPos.y = height\n        } else {\n            startPos.x = width\n            startPos.y = 0\n            endPos.x = 0\n            endPos.y = height\n        }\n        ctx.moveTo(startPos.x, startPos.y);\n        ctx.lineTo(endPos.x, endPos.y);\n        ctx.stroke();\n    }\n    draw(){\n\n        this.canvas.width = this.size.width\n        this.canvas.height = this.size.height\n\n        this.createCanvasLine(this.canvas.getContext(\"2d\"), this.canvas.width, this.canvas.height)\n\n        this.container.appendChild(this.canvas)\n    }\n    destroy(){\n        this.canvas.remove();\n    }\n    getLineRect(){\n        let boundingClientRect = this.canvas.getBoundingClientRect()\n        return {\n            top: boundingClientRect.top,\n            bottom: boundingClientRect.bottom,\n            left: boundingClientRect.left,\n            right: boundingClientRect.right\n        }\n    }\n}","export const percentageGap = 0.3\n/**\n *\n * @param {{width: number, height: number}} gameContainerSize\n */\nexport const getGapInPixels = (gameContainerSize) => {\n    return gameContainerSize.width * percentageGap\n}","export function delay(t, v) {\n    return new Promise(function(resolve) {\n        setTimeout(resolve.bind(null, v), t)\n    });\n}\n\nexport function mobileAndTabletcheck(){\n    let check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n    return check;\n}\n\nexport function isMobileSafari() {\n    let ua = window.navigator.userAgent;\n    let iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);\n    let webkit = !!ua.match(/WebKit/i);\n    return iOS && webkit && !ua.match(/CriOS/i);\n\n}","import {SlidingLine} from \"./sliding-line\";\nimport {getGapInPixels} from \"../lines-gap\";\nimport {mobileAndTabletcheck} from \"../../util/util\";\n\nexport class SlidingLineContainer {\n    /**\n     *\n     * @param {string} containerID\n     * @param {GameContainer} gameContainer\n     */\n    constructor(containerID, gameContainer){\n        this.container = document.getElementById(containerID)\n        this.gameContainer = gameContainer\n        this.lines = []\n        this.drawLines()\n    }\n    drawLines(){\n        let containerRect = this.container.getBoundingClientRect()\n        let widthOfLine = containerRect.width / 2 - getGapInPixels(this.gameContainer.getDimensions()) / 2\n        let heightOfLine = containerRect.height / 2\n        let size = {\n            width: widthOfLine,\n            height: heightOfLine\n        }\n        this.lines.push(new SlidingLine(this.container, size, 'left'))\n        this.lines.push(new SlidingLine(this.container, size, 'right'))\n        this.lines.push(new SlidingLine(this.container, size, 'left'))\n        this.lines.push(new SlidingLine(this.container, size, 'right'))\n    }\n    destroyLines(){\n        for(let line of this.lines){\n            line.destroy();\n            line = null;\n        }\n        this.lines = []\n    }\n    getLines(){\n        return {\n            upper: {\n                left: this.lines[0],\n                right: this.lines[1]\n            },\n            lower: {\n                left: this.lines[2],\n                right: this.lines[3]\n            }\n        }\n    }\n}","/**\n * @typedef {Object} SlidingPoints\n * @property {{x: number, y: number}} start\n * @property {{x: number, y: number}} end\n */\n\nexport class CaseDrawer {\n    /**\n     *\n     * @param {SlidingPoints} slidingPoints\n     * @param {{top: number, left: number}} catchCoordinates\n     * @param {{fall: number, slide: number}} timings\n     */\n    constructor(slidingPoints, catchCoordinates, timings){\n        this.element = document.createElement(\"div\")\n        this.element.classList.add('case')\n        this.slidingPoints = slidingPoints\n        this.catchCoordinates = catchCoordinates\n        this.timings = timings\n    }\n    draw(){\n        // this.canvas.width = 20;\n        // this.canvas.height = 20;\n        // let ctx = this.canvas.getContext(\"2d\")\n        // ctx.beginPath();\n        // ctx.arc(10, 10, 10, 0, 2 * Math.PI);\n        // ctx.fillStyle = \"#0095DD\";\n        // ctx.fill()\n        // ctx.closePath();\n    }\n    move(){\n        this.element.style[\"transition-duration\"] = `${this.timings.slide / 1000}s`;\n        this.element.style.top = `${this.slidingPoints.end.y}px`\n        this.element.style.left = `${this.slidingPoints.end.x}px`\n        this.element.addEventListener('transitionend', (event) => {\n            if (event.propertyName === 'top') {\n                this.element.style[\"transition-duration\"] = `${this.timings.fall / 1000}s`;\n                this.element.style.top = `${this.catchCoordinates.top}px`\n                this.element.style.left = `${this.catchCoordinates.left}px`\n            }\n        })\n    }\n    init(){\n        this.draw()\n        this.element.setAttribute('style', `top: ${this.slidingPoints.start.y}px;\n         left: ${this.slidingPoints.start.x}px;\n          transition-property: all;\n          transition-timing-function: linear;`)\n        document.body.appendChild(this.element)\n    }\n    destroy(){\n        this.element.remove()\n    }\n}","/**\n * @module TimeNormalization\n * Normalizing time differences for 'upper' and 'lower' cases\n */\n\nexport const upperFallTime = 500;\nexport const lowerFallTime = 150;\n\n/**\n *\n * @param {number} time - ms\n * @param {string} pos - 'upper' or 'lower'\n * @returns number\n */\nexport function normalizeTime(time, pos) {\n    switch (pos){\n        case 'upper':\n            return time + upperFallTime;\n        case 'lower':\n            return time + lowerFallTime;\n        default:\n            throw new Error('Inappropriate position')\n    }\n}","\n\nexport class ScoreBoard {\n    constructor(levelEl, scoreEl, bestScoreEl){\n        this.levelEl = levelEl\n        this.scoreEl = scoreEl\n        this.bestScoreEl = bestScoreEl\n    }\n    injectScore(score){\n        this.scoreEl.innerHTML = `SCORE: ${score}`\n    }\n    injectBestScore(bestScore){\n        this.bestScoreEl.innerHTML = `BEST: ${bestScore}`\n    }\n    injectLevel(level){\n        this.levelEl.innerHTML = `LEVEL: ${level}`\n    }\n}","import {CaseDrawer} from \"../rendering/case/case-drawer\"\nimport {delay, isMobileSafari} from \"../util/util\";\nimport {lowerFallTime, upperFallTime} from \"../util/time-normaliztion\";\nimport {ScoreBoard} from \"../rendering/score-board/score-board\";\n\nexport class CaseManager {\n    /**\n     *\n     * @param lines\n     * @param {{top: number, left: number, right: number}} catchCoordinates\n     */\n    constructor(lines, catchCoordinates){\n        this.lines = lines;\n        this.catchCoordinates = catchCoordinates;\n        this.cases = []\n        this.caseDrawers = []\n    }\n    /** PRIVATE METHODS */\n\n    /**\n     * @param {Case} Case\n     */\n    getCaseDrawer(Case){\n        let casePosition = [Case.getHorizontalPosition(), Case.getVerticalPosition()]\n        let lineRect = this.lines[casePosition[1]][casePosition[0]].getLineRect()\n\n        let heightCorrection = 17;\n        let rightPositionCorrection = 20;\n\n        let slidingPoints = {\n            start: {\n                y: (casePosition[0] === 'left') ? lineRect.top - heightCorrection : lineRect.top - heightCorrection,\n                x: (casePosition[0] === 'left') ? lineRect.left : lineRect.right - rightPositionCorrection\n            },\n            end: {\n                y: (casePosition[0] === 'left') ? lineRect.bottom - heightCorrection : lineRect.bottom - heightCorrection,\n                x: (casePosition[0] === 'left') ? lineRect.right : lineRect.left - rightPositionCorrection\n            }\n        }\n        let catchCoordinates = {\n            top: this.catchCoordinates.top,\n            left: (casePosition[0] === 'left') ? this.catchCoordinates.left : this.catchCoordinates.right - rightPositionCorrection\n        }\n        let fallTime = (casePosition[1] === 'upper') ? upperFallTime : lowerFallTime\n        let slideTime = Case.getExpirationTime() - fallTime\n        let timings = {\n            slide: slideTime,\n            fall: fallTime\n        }\n        return new CaseDrawer(slidingPoints, catchCoordinates, timings)\n    }\n    /** PUBLIC METHODS */\n    /**\n     * @param {Case} Case\n     */\n    push(Case){\n        this.cases.push(Case)\n    }\n    /**\n     *\n     * @returns {PromiseLike<string> | Promise<string>} - returns Promise which resolves to 'left' or 'right'\n     */\n    pop(){\n        let specCase = this.cases.pop()\n        if(!specCase){\n            throw new Error('There are no cases left')\n        }\n        let caseDrawer = this.getCaseDrawer(specCase)\n        caseDrawer.init()\n\n        this.caseDrawers.push(caseDrawer)\n\n        return delay(50).then(() => {\n            caseDrawer.move()\n            return delay(specCase.getExpirationTime())\n        }).then(() => {\n            caseDrawer.destroy()\n            return specCase.getHorizontalPosition()\n        })\n    }\n    clear(){\n        this.caseDrawers.forEach(el => {\n            el.destroy()\n            el = null;\n        })\n    }\n}","\n\nexport class Hero {\n    /**\n     *\n     * @param {string} curPosition - 'left' or 'right'\n     */\n    constructor(curPosition){\n        this.curPosition = curPosition\n    }\n\n    /**\n     *\n     * @param {string} pos - 'left' or 'right'\n     */\n    changePosition(pos){\n        if(pos !== 'left' && pos !== 'right'){\n            throw new Error(`Position has to be left or right, ${pos} is not valid`)\n        }\n        this.curPosition = pos;\n    }\n    getPosition(){\n        return this.curPosition\n    }\n}","\n\nexport class ScoreStorage {\n    static getBestScore(){\n        if(localStorage.best === undefined){\n            return 0\n        }\n        return localStorage.best;\n    }\n    static setBestScore(score){\n        localStorage.best = score;\n    }\n}","import {ScoreStorage} from \"../score-storage/score-storage\";\n\n\nexport class Game {\n    /**\n     * @description main class\n     * @param {LevelManager} levelManager\n     * @param {Hero} hero\n     * @param {CaseFactory} CaseFactory\n     * @param {CaseManager} caseManager\n     * @param {ScoreBoard} scoreBoard\n     * @param {StartModal} startModal\n     */\n    constructor(levelManager, hero, CaseFactory, caseManager, scoreBoard, startModal){\n        this.levelManager = levelManager\n        this.hero = hero\n        this.CaseFactory = CaseFactory\n        this.caseManager = caseManager\n        this.scoreBoard = scoreBoard\n        this.startModal = startModal\n        this.score = 0;\n        this.cases = []\n        this.timers = []\n        this.isOver = false;\n    }\n    /** PRIVATE METHODS */\n    createCases(){\n        let levelParams = this.levelManager.getLevelParams()\n        return this.CaseFactory(levelParams.speed, levelParams.numOfCases)\n    }\n\n    /**\n     *\n     * @param {number} time - ms after which case will go out\n     * @returns number - timeout reference for clearTimeout\n     */\n    delayCase(time){\n        return setTimeout(() => {\n            if(this.isOver){\n                return false;\n            }\n            this.caseManager.pop().then(this.onCaseResolved.bind(this))\n        }, time)\n    }\n    onCaseResolved(position){\n        if(this.isOver){\n            return false;\n        }\n        if(this.hero.getPosition() !== position){\n            return this.endGame()\n        }\n        this.addScore()\n        this.timers.pop()\n        if(this.timers.length === 0){\n            this.genNextLevel()\n        }\n    }\n    addScore(){\n        this.score++;\n        this.scoreBoard.injectScore(this.score);\n    }\n    endGame(){\n        this.isOver = true;\n        this.caseManager.clear()\n        this.timers.forEach(el => {\n            clearTimeout(el)\n        })\n        if(this.score > ScoreStorage.getBestScore()){\n            ScoreStorage.setBestScore(this.score)\n            this.scoreBoard.injectBestScore(this.score)\n        }\n        this.startModal.create()\n    }\n    genNextLevel(){\n        this.levelManager.levelUp()\n        this.scoreBoard.injectLevel(this.levelManager.level)\n        this.cases = this.createCases()\n        for(let specCase of this.cases){\n            this.caseManager.push(specCase)\n        }\n        this.start()\n    }\n    /** PUBLIC METHODS */\n    /**\n     * @param {number} level\n     * @returns {Game}\n     */\n    init(level){\n\n        this.scoreBoard.injectScore(this.score)\n        this.scoreBoard.injectLevel(level)\n\n        this.levelManager.setLevel(level)\n        this.cases = this.createCases()\n        for(let specCase of this.cases){\n            this.caseManager.push(specCase)\n        }\n        return this;\n    }\n\n    /**\n     *\n     * @param {string} pos - 'left' or 'right'\n     */\n    changeHeroPosition(pos){\n        this.hero.changePosition(pos)\n    }\n    start(){\n        for(let i = 0; i < this.cases.length; i++){\n\n            let timer = this.delayCase(i * 1000 / this.levelManager.getLevelParams().casesPerSec)\n\n            this.timers.push(timer);\n\n        }\n    }\n}","\n\nexport class Case {\n    /**\n     *\n     * @param expirationTime - amount of time in ms\n     * @param {[string, string]} casePosition - tuple [horizontalPosition, verticalPosition]\n     */\n    constructor(expirationTime, casePosition){\n        this.expirationTime = expirationTime\n        this.casePosition = casePosition\n    }\n    getHorizontalPosition(){\n        return this.casePosition[0]\n    }\n    getVerticalPosition(){\n        return this.casePosition[1]\n    }\n    getExpirationTime(){\n        return this.expirationTime\n    }\n    setExpitationTime(newTime){\n        this.expirationTime = newTime\n    }\n}","import {Case} from \"./case\";\nimport {normalizeTime} from \"../util/time-normaliztion\";\n\n/**\n *\n * @returns {*[]} - tuple [horizontalPosition, verticalPosition]\n */\nfunction getCasePosition(){\n    let horizontalPosNum = Math.round(Math.random())\n    let verticalPosNum = Math.round(Math.random())\n    let verticalPos = (verticalPosNum === 0) ? 'lower' : 'upper';\n    let horizontalPos = (horizontalPosNum === 0) ? 'left' : 'right';\n    return [horizontalPos, verticalPos]\n}\n\n/**\n * @description creates instances of cases depending on parameters\n * @param baseSpeed - the amount of time needed for case to be ready for a catch\n * @param numOfCases\n * @returns {Case[]}\n */\nexport function CaseFactory(baseSpeed, numOfCases){\n    let ret = []\n    for(let i = 0; i < numOfCases; i++){\n        let casePosition = getCasePosition()\n        let normalizedTime = normalizeTime((baseSpeed * 1000), casePosition[1])\n        ret.push(new Case(normalizedTime, casePosition))\n    }\n    return ret\n}","export const firstLevelNumOfCases = 20;\nexport const getNextLevelNumOfCases = (num) => num + 5\nexport const getPrevLevelNumOfCases = (num) => num - 5\n","import {firstLevelNumOfCases, getNextLevelNumOfCases, getPrevLevelNumOfCases} from \"./level-defaults\";\n\n\nexport class LevelManager {\n    /**\n     *\n     * @param startLevel - positive integer\n     */\n    constructor(startLevel){\n        this.level = 1\n        this.numOfCases = firstLevelNumOfCases\n        this.slowestSpeed = 1;\n        if(startLevel !== 1 && startLevel){\n            this.setLevel(startLevel)\n        }\n    }\n    setLevel(level){\n        for(let i = 1; i < level; i++){\n            this.levelUp()\n        }\n    }\n    levelUp(){\n        this.level++;\n        this.numOfCases = getNextLevelNumOfCases(this.numOfCases)\n        return this;\n    }\n    levelDown(){\n        this.level--;\n        this.numOfCases = getPrevLevelNumOfCases(this.numOfCases)\n        return this;\n    }\n    getSpeed(){\n        return this.slowestSpeed - (this.level * 0.05)\n    }\n    getCasesPerSecond(){\n        return 1.5 + (this.level * 0.05)\n    }\n    getNumOfCases(){\n        return this.numOfCases\n    }\n    getLevelParams(){\n        return {\n            speed: this.getSpeed(),\n            casesPerSec: this.getCasesPerSecond(),\n            numOfCases: this.getNumOfCases()\n        }\n    }\n}","import {mobileAndTabletcheck} from \"../util/util\";\n\n\nexport class GameContainer {\n    /**\n     *\n     * @param {string} elementID\n     */\n    constructor(elementID){\n        this.container = document.getElementById(elementID)\n        if(mobileAndTabletcheck()){\n            let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n            this.container.style.height = `${height}px`\n        }\n    }\n    /**\n     *\n     * @param {Function} leftHandler\n     * @param {Function} rightHandler\n     */\n    injectTouchControls(leftHandler, rightHandler){\n        let buttons = [\n            {\n                class: 'button-left',\n                containerClass: ['touch-container', 'left'],\n                onclick: leftHandler\n            },\n            {\n                class: 'button-right',\n                containerClass: ['touch-container', 'right'],\n                onclick: rightHandler\n            }\n        ];\n        let controls = document.createElement('div')\n        controls.id = \"controls\"\n        for(let button of buttons){\n            let btnContainer = document.createElement(\"div\")\n            btnContainer.onclick = button.onclick;\n            btnContainer.classList.add(...button.containerClass);\n            let btn = document.createElement(\"button\")\n            btn.classList.add(button.class);\n\n            btnContainer.appendChild(btn);\n\n            controls.appendChild(btnContainer);\n        }\n        this.container.appendChild(controls)\n    }\n\n    /**\n     * @returns {{width: number, height: number}}\n     */\n    getDimensions(){\n        let rect = this.container.getBoundingClientRect()\n        return {\n            width: rect.width,\n            height: rect.height\n        }\n    }\n\n    /**\n     * @description container\n     */\n    getElement(){\n        return this.container\n    }\n}","\n\nexport class HeroContainer {\n    constructor(elementID, width){\n        this.container = document.getElementById(elementID)\n        this.setWidth(width)\n    }\n    /**\n     *\n     * @param {number} width - pixels\n     */\n    setWidth(width){\n        this.container.style.width = `${width}px`\n    }\n    getElement(){\n        return this.container\n    }\n    getTopMargin(){\n        let style = window.getComputedStyle(this.container)\n        return parseFloat(style.marginTop)\n    }\n}","\n\nexport class StartModal {\n    /**\n     * @param {GameContainer} gameContainer\n     * @param {Function} startGameFn\n     */\n    constructor(gameContainer, startGameFn){\n        this.gameContainer = gameContainer;\n        this.startGame = startGameFn;\n        this.overlay = null;\n        this.modal = null;\n    }\n    /** PRIVATE METHODS */\n    createOverlayEl(){\n        let overlay = document.createElement('div')\n        overlay.classList.add('overlay')\n        return overlay;\n    }\n    createModalEl(){\n        let modal = document.createElement('div')\n        modal.classList.add('modal')\n        return modal;\n    }\n    /** PUBLIC METHODS */\n    create(){\n        this.overlay = this.createOverlayEl();\n        this.modal = this.createModalEl();\n        let playButton = document.createElement('button')\n        playButton.classList.add('play-button')\n        playButton.onclick = () => {\n            this.destroy();\n            this.startGame();\n        };\n        this.modal.appendChild(playButton);\n        let container = this.gameContainer.getElement();\n        container.appendChild(this.overlay)\n        container.appendChild(this.modal);\n    }\n    destroy(){\n        if(this.overlay !== null){\n            this.overlay.remove()\n            this.overlay = null;\n        }\n        if(this.modal !== null){\n            this.modal.remove()\n            this.modal = null;\n        }\n    }\n}","import {HeroDrawer} from \"./rendering/hero/hero-drawer\";\nimport {SlidingLineContainer} from \"./rendering/sliding-line/sliding-line-container\";\nimport {CaseManager} from \"./case/case-manager\";\nimport {Hero} from \"./hero/hero\";\nimport {Game} from \"./game/game\";\nimport {CaseFactory} from \"./case/case-factory\";\nimport {LevelManager} from \"./game/level-manager\";\nimport {ScoreBoard} from \"./rendering/score-board/score-board\";\nimport {ScoreStorage} from \"./score-storage/score-storage\";\nimport {GameContainer} from \"./rendering/game-container\";\nimport {mobileAndTabletcheck} from \"./util/util\";\nimport {HeroContainer} from \"./rendering/hero/hero-container\";\nimport {getGapInPixels} from \"./rendering/lines-gap\";\nimport {StartModal} from \"./rendering/start-modal\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n    let gameContainer = new GameContainer('game-container')\n\n    let slidingLineContainer = new SlidingLineContainer('sliding-lines-container', gameContainer);\n\n    let heroContainer = new HeroContainer('hero', getGapInPixels(gameContainer.getDimensions()))\n    let heroDrawer = new HeroDrawer(heroContainer, 'left')\n    let hero = new Hero('left');\n\n    let caseManager = new CaseManager(slidingLineContainer.getLines(), heroDrawer.getCatchCoordinates())\n\n    let scoreBoard = new ScoreBoard(\n        document.getElementById('level'),\n        document.getElementById('score'),\n        document.getElementById('best-score')\n    )\n\n    scoreBoard.injectBestScore(ScoreStorage.getBestScore())\n\n    let game = null;\n\n    window.startGame = () => {\n        if(game){\n            game = null;\n        }\n        game = new Game(new LevelManager(), hero, CaseFactory, caseManager, scoreBoard, startModal)\n        game.init(1).start();\n    }\n\n    let startModal = new StartModal(gameContainer, window.startGame)\n\n    startModal.create();\n\n\n    window.left = function () {\n        game.changeHeroPosition('left')\n        heroDrawer.onChange('left')\n    }\n\n    window.right = function () {\n        game.changeHeroPosition('right')\n        heroDrawer.onChange('right')\n    }\n\n    if(mobileAndTabletcheck()){\n        gameContainer.injectTouchControls(window.left, window.right)\n    }\n\n    document.addEventListener('keydown', function (e) {\n        if (e.keyCode == '37') {\n            window.left()\n        }\n        else if (e.keyCode == '39') {\n            window.right()\n        }\n    })\n\n    window.onresize = function () {\n        slidingLineContainer.destroyLines()\n        slidingLineContainer.drawLines()\n        heroContainer.setWidth(getGapInPixels(gameContainer.getDimensions()))\n    }\n\n});\n"]}